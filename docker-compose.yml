version: '3.8'

services:
  # ============================================
  # Databases
  # ============================================
  
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - microservices-network
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "YourStrong@Passw0rd" -Q "SELECT 1" -C || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=inventory_db,audit_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # Message Broker
  # ============================================
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================
  # Identity & Access Management
  # ============================================
  
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HOSTNAME=localhost
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT_HTTPS=false
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ============================================
  # Observability Stack
  # ============================================
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics exporter
    networks:
      - microservices-network
    depends_on:
      - tempo
      - loki

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--enable-feature=exemplar-storage'
    volumes:
      - ./infra/observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./infra/observability/loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/tmp/loki
    ports:
      - "3100:3100"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./infra/observability/tempo-config.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317"        # OTLP gRPC
      - "4318"        # OTLP HTTP
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - ./infra/observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./infra/observability/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      - prometheus
      - loki
      - tempo
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Microservices
  # ============================================
  
  orders-api:
    build:
      context: .
      dockerfile: src/Services/Orders.API/Dockerfile
    container_name: orders-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__OrdersDb=Server=sqlserver;Database=orders_db;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__User=guest
      - RabbitMQ__Password=guest
      - Keycloak__Authority=http://keycloak:8080/realms/microservices
      - OpenTelemetry__OtlpEndpoint=http://otel-collector:4317
      - Loki__Endpoint=http://loki:3100
    ports:
      - "5001:8080"
    networks:
      - microservices-network
    depends_on:
      sqlserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started

  inventory-api:
    build:
      context: .
      dockerfile: src/Services/Inventory.API/Dockerfile
    container_name: inventory-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__InventoryDb=Host=postgres;Database=inventory_db;Username=postgres;Password=postgres
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__User=guest
      - RabbitMQ__Password=guest
      - Keycloak__Authority=http://keycloak:8080/realms/microservices
      - OpenTelemetry__OtlpEndpoint=http://otel-collector:4317
      - Loki__Endpoint=http://loki:3100
    ports:
      - "5002:8080"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started

  notifications-api:
    build:
      context: .
      dockerfile: src/Services/Notifications.API/Dockerfile
    container_name: notifications-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__User=guest
      - RabbitMQ__Password=guest
      - Keycloak__Authority=http://keycloak:8080/realms/microservices
      - OpenTelemetry__OtlpEndpoint=http://otel-collector:4317
      - Loki__Endpoint=http://loki:3100
    ports:
      - "5003:8080"
    networks:
      - microservices-network
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started

  audit-api:
    build:
      context: .
      dockerfile: src/Services/Audit.API/Dockerfile
    container_name: audit-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__AuditDb=Host=postgres;Database=audit_db;Username=postgres;Password=postgres
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__User=guest
      - RabbitMQ__Password=guest
      - Keycloak__Authority=http://keycloak:8080/realms/microservices
      - OpenTelemetry__OtlpEndpoint=http://otel-collector:4317
      - Loki__Endpoint=http://loki:3100
    ports:
      - "5004:8080"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started

  # ============================================
  # Workers
  # ============================================

  inventory-worker:
    build:
      context: .
      dockerfile: src/Workers/Inventory.Worker/Dockerfile
    container_name: inventory-worker
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__InventoryDb=Host=postgres;Database=inventory_db;Username=postgres;Password=postgres
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__User=guest
      - RabbitMQ__Password=guest
      - OpenTelemetry__OtlpEndpoint=http://otel-collector:4317
      - Loki__Endpoint=http://loki:3100
      - Environment=development
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      - microservices-network

  # ============================================
  # API Gateway
  # ============================================

  api-gateway:
    build:
      context: .
      dockerfile: src/Gateway/Ocelot.Gateway/Dockerfile
    container_name: api-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - Keycloak__Authority=http://keycloak:8080/realms/microservices
      - OpenTelemetry__OtlpEndpoint=http://otel-collector:4317
      - Loki__Endpoint=http://loki:3100
      - Environment=development
    ports:
      - "5000:8080"
    depends_on:
      - orders-api
      - inventory-api
      - notifications-api
      - audit-api
      - keycloak
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  sqlserver-data:
  postgres-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  loki-data:
  tempo-data:
  grafana-data:

